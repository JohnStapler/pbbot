import discord
from discord.ext import commands
import json

# Bot token


# Prefix for commands
PREFIX = '/'

# JSON file to store numbers
JSON_FILE = 'numbers.json'

# Initialize bot
bot = commands.Bot(command_prefix="/", intents=discord.Intents.all())

# Load numbers from JSON file
def load_numbers():
    try:
        with open(JSON_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# Save numbers to JSON file
def save_numbers(numbers):
    with open(JSON_FILE, 'w') as f:
        json.dump(numbers, f, indent=4)

# Command to store a number
@bot.command(aliases=['npb15'])
async def NPB15(ctx, number: int):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id not in numbers:
        numbers[user_id] = {}
    if ctx.message.attachments:
        attachment_url = ctx.message.attachments[0].url
        numbers[user_id]['NPB15'] = {'number': number, 'screenshot': attachment_url}
    else:
        numbers[user_id]['NPB15'] = {'number': number}
    save_numbers(numbers)
    await ctx.send(f'Nytt PB på 15S registrerat: {number} WPM')

# Command to retrieve stored number
@bot.command(aliases=['pb15'])
async def PB15(ctx):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id in numbers and 'NPB15' in numbers[user_id]:
        pb = numbers[user_id]["NPB15"]
        message = f'Ditt 15S PB är: {pb["number"]} WPM'
        if 'screenshot' in pb:
            message += f'\nScreenshot: {pb["screenshot"]}'
        await ctx.send(message)
    else:
        await ctx.send(f'Inget 15S PB registrerat')

# Similarly define commands for NPB30 and PB30
@bot.command(aliases=['npb30'])
async def NPB30(ctx, number: int):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id not in numbers:
        numbers[user_id] = {}
    if ctx.message.attachments:
        attachment_url = ctx.message.attachments[0].url
        numbers[user_id]['NPB30'] = {'number': number, 'screenshot': attachment_url}
    else:
        numbers[user_id]['NPB30'] = {'number': number}
    save_numbers(numbers)
    await ctx.send(f'Nytt PB på 30S registrerat: {number} WPM')

@bot.command(aliases=['pb30'])
async def PB30(ctx):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id in numbers and 'NPB30' in numbers[user_id]:
        pb = numbers[user_id]["NPB30"]
        message = f'Ditt 30S PB är: {pb["number"]} WPM'
        if 'screenshot' in pb:
            message += f'\nScreenshot: {pb["screenshot"]}'
        await ctx.send(message)
    else:
        await ctx.send(f'Inget 30S PB registrerat')

# Command to store a number for NPB60
@bot.command(aliases=['npb60'])
async def NPB60(ctx, number: int):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id not in numbers:
        numbers[user_id] = {}
    if ctx.message.attachments:
        attachment_url = ctx.message.attachments[0].url
        numbers[user_id]['NPB60'] = {'number': number, 'screenshot': attachment_url}
    else:
        numbers[user_id]['NPB60'] = {'number': number}
    save_numbers(numbers)
    await ctx.send(f'Nytt PB på 60S registrerat: {number} WPM')

# Command to retrieve stored number for PB60
@bot.command(aliases=['pb60'])
async def PB60(ctx):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id in numbers and 'NPB60' in numbers[user_id]:
        pb = numbers[user_id]["NPB60"]
        message = f'Ditt 60S PB är: {pb["number"]} WPM'
        if 'screenshot' in pb:
            message += f'\nScreenshot: {pb["screenshot"]}'
        await ctx.send(message)
    else:
        await ctx.send(f'Inget 60S PB registrerat')

# Command to show all stored PBs for a user
@bot.command(aliases=['pb'])
async def PB(ctx):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id in numbers:
        message = "Här är dina PB:s\n"
        if 'NPB15' in numbers[user_id]:
            pb = numbers[user_id]['NPB15']
            if isinstance(pb, int):
                message += f"15S = {pb} WPM\n"
            else:
                message += f"15S = {pb['number']} WPM\n"
        else:
            message += "15S = Inget registrerat\n"
        if 'NPB30' in numbers[user_id]:
            pb = numbers[user_id]['NPB30']
            if isinstance(pb, int):
                message += f"30S = {pb} WPM\n"
            else:
                message += f"30S = {pb['number']} WPM\n"
        else:
            message += "30S = Inget registrerat\n"
        if 'NPB60' in numbers[user_id]:
            pb = numbers[user_id]['NPB60']
            if isinstance(pb, int):
                message += f"60S = {pb} WPM"
            else:
                message += f"60S = {pb['number']} WPM"
        else:
            message += "60S = Inget registrerat"
        await ctx.send(message)
    else:
        await ctx.send(f'Inga PB registrerade för dig')

# Command to write a specific text
@bot.command()
async def Jeppe(ctx):
    text = ("den ökände Jeppe, stiger fram ur skuggorna för att möta er. Ni kan vara säkra på att jag, "
            "med mina snabba fingrar och oöverträffade skrivförmåga, är redo att ta er på en stenhård utmaning. "
            "Min existens är en påminnelse om er ständiga jakt på framgång och er strävan att överträffa alla hinder, "
            "inklusive mig. Så kom igen, ge mig er bästa skott! Jag är redo att visa er vad verklig skrivkraft innebär.")
    await ctx.send(text)

# Command to show all available commands
@bot.command(aliases=['Help'])
async def Jelp(ctx):
    commands_list = [
        "**/NPB15** - Registrerar ett nytt PB på 15S.",
        "**/PB15** - Visar ditt registrerade PB på 15S.",
        "**/NPB30** - Registrerar ett nytt PB på 30S.",
        "**/PB30** - Visar ditt registrerade PB på 30S.",
        "**/NPB60** - Registrerar ett nytt PB på 60S.",
        "**/PB60** - Visar ditt registrerade PB på 60S.",
        "**/PB** - Visar alla dina registrerade PB.",
        "**/Jeppe** - Lite Jeppe.",
        "**/3MR** - Förklarar vad treminutersregeln är."
    ]
    help_message = "Här är en lista över tillgängliga kommandon:\n\n"
    help_message += "\n".join(commands_list)
    await ctx.send(help_message)

@bot.command(aliases = ['3MR','3mr'])
async def TMR(ctx):
    text = ("#3MR är kort för **treminutersregeln**. Det är regeln man kan tillämpa när man skriver hastighetstest för att få goda resultat oftare. Den går ut på att man tar en paus på tre minuter mellan varje test. Detta gör man för att återställa sinnestämningen men också för att få tillbaka energin.")
    await ctx.send(text)

# Run the bot
bot.run(TOKEN)
