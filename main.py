import argparse
import asyncio
import json
import os
import random
import sys
import time
from datetime import timedelta

import discord
import discord.utils
from discord.ext import commands
from dotenv import load_dotenv

from language_service import swedish_quotes
from utils import none_or_whitespace

recent_quotes = []
sync_commands = False
"""Prevent rate-limiting by only syncing commands when needed. Start with '--sync' to enable."""

# Prefix for commands
PREFIX = "/"

# JSON file to store numbers
JSON_FILE = "numbers.json"

# Initialize bot
bot = commands.Bot(command_prefix="/", intents=discord.Intents.all())


@bot.hybrid_command()
async def lb(ctx):
    # Load numbers from JSON file
    numbers = load_numbers()

    # Check if there are any recorded test results
    if not numbers:
        await ctx.send("Inga testresultat finns 칛nnu.")
        return

    # Create a list of tuples containing (WPM, user_id, quote) for each test result
    results = []
    for user_id, data in numbers.items():
        if "last_test" in data:
            wpm = data["last_test"]["number"]
            quote = data["last_test"]["quote"]
            results.append((wpm, user_id, quote))

    # Sort the results by WPM (descending order)
    results.sort(reverse=True)

    # Prepare the leaderboard message
    leaderboard_message = "**Top 10 snabbaste testresultat:**\n"
    for i, (wpm, user_id, quote) in enumerate(results[:10], start=1):
        # Get the user's display name
        user = bot.get_user(int(user_id))
        if user:
            username = user.display_name
        else:
            username = "Anonym"

        # Format WPM with one decimal place
        formatted_wpm = "{:.1f}".format(wpm)

        # Add the result to the leaderboard message
        leaderboard_message += (
            f"{i}. {username}: **{formatted_wpm} WPM** - Quote: {quote}\n"
        )

    # Send the leaderboard message
    await ctx.send(leaderboard_message)


@bot.hybrid_command()
# @commands.has_permissions(moderate_members=True)  # Kontrollera att botten har r칛ttigheter att moderera anv칛ndare
async def typing_test(ctx):
    global recent_quotes
    # V칛lj ett slumpm칛ssigt citat som inte 칛r i recent_quotes
    available_indices = [
        i for i in range(len(swedish_quotes)) if i not in recent_quotes
    ]
    if not available_indices:
        await ctx.send("Kan inte hitta fler unika citat att anv칛nda.")
        return

    quote_index = random.choice(available_indices)
    quote = swedish_quotes[quote_index]

    # Uppdatera listan med senast anv칛nda citat
    recent_quotes.append(quote_index)
    if len(recent_quotes) > 20:
        recent_quotes.pop(0)  # Ta bort det 칛ldsta f칬r att h친lla listan till 20

    # Kontrollera om anv칛ndaren har administrativa r칛ttigheter eller en h칬gre roll
    if (
        ctx.author.guild_permissions.administrator
        or ctx.author.top_role.position > ctx.guild.me.top_role.position
    ):
        await ctx.send("Administrat칬rer 칛r undantagna fr친n timeout under nedr칛kningen.")
    else:
        # Timeout anv칛ndaren under nedr칛kningen (3 sekunder)
        try:
            timeout_until = discord.utils.utcnow() + timedelta(seconds=3)
            await ctx.author.timeout(timeout_until)  # Timeout anv칛ndaren i 3 sekunder
        except discord.Forbidden:
            await ctx.send(
                "Kunde inte tysta anv칛ndaren. Kontrollera att boten har r칛tt beh칬righeter och att den har en h칬gre roll 칛n anv칛ndaren."
            )
            return
        except discord.HTTPException:
            await ctx.send("Ett fel uppstod n칛r anv칛ndaren skulle tystas.")
            return

    # Skapa ett inb칛ddat meddelande f칬r nedr칛kningen
    embed = discord.Embed(
        title="3...", description=f"**{quote}**", color=0xFF0000
    )  # R칬d f칬r 3
    countdown_message = await ctx.send(embed=embed)

    # 츿ndra nedr칛kningen till 2
    await asyncio.sleep(1)
    embed.title = "2..."
    embed.color = 0xFFA500  # Orange
    await countdown_message.edit(embed=embed)

    # 츿ndra nedr칛kningen till 1
    await asyncio.sleep(1)
    embed.title = "1..."
    embed.color = 0xFFFF00  # Gul
    await countdown_message.edit(embed=embed)

    # 츿ndra till "... K칐R!" och starta testet
    await asyncio.sleep(1)
    embed.title = "... K칐R!"
    embed.color = 0x00FF00  # Gr칬n
    await countdown_message.edit(embed=embed)

    # Ta bort timeouten omedelbart n칛r nedr칛kningen 칛r 칬ver (om anv칛ndaren var timeoutad)
    if not (
        ctx.author.guild_permissions.administrator
        or ctx.author.top_role.position > ctx.guild.me.top_role.position
    ):
        try:
            await ctx.author.timeout(None)
        except discord.Forbidden:
            await ctx.send(
                "Kunde inte 친terst칛lla anv칛ndarens skrivbeh칬righet. Kontrollera att boten har r칛tt beh칬righeter."
            )
            return
        except discord.HTTPException:
            await ctx.send("Ett fel uppstod n칛r skrivbeh칬righeten skulle 친terst칛llas.")
            return

    # Starta tidtagningen direkt n칛r "... K칐R!" visas
    start_time = time.time()

    # V칛nta p친 anv칛ndarens inmatning efter "... K칐R!" visas
    try:
        user_input = await bot.wait_for(
            "message", check=lambda message: message.author == ctx.author, timeout=30
        )
    except asyncio.TimeoutError:
        await ctx.send("**Tiden 칛r ute!** F칬rs칬k igen.")
        return

    # Stoppa tidtagningen direkt n칛r anv칛ndaren skickar sitt meddelande
    end_time = time.time()

    # Ber칛kna tiden det tog att skriva
    time_taken = end_time - start_time

    # Dela upp anv칛ndarens inmatning i ord och ber칛kna hastighet per ord
    user_words = user_input.content.split()
    quote_words = quote.split()

    # Ber칛kna accuracy och WPM
    correct_words = sum(a == b for a, b in zip(user_words, quote_words))
    accuracy = correct_words / len(quote_words) * 100 if quote_words else 0
    words_typed = len(user_words)
    wpm = words_typed / (time_taken / 60)

    # Skicka resultaten direkt efter att anv칛ndaren trycker enter
    await ctx.send(f"Din accuracy 칛r **{accuracy:.2f}%**.")
    await ctx.send(f"Din hastighet var **{wpm:.2f}** ord per minut.")
    await ctx.send(f"Det tog dig **{time_taken:.2f}** sekunder att skriva.")

    # Spara testresultatet om det 칛r ett rekord
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id not in numbers:
        numbers[user_id] = {}

    if (
        "last_test" not in numbers[user_id]
        or wpm > numbers[user_id]["last_test"]["number"]
    ):
        numbers[user_id]["last_test"] = {"number": wpm, "quote": quote}
        save_numbers(numbers)
        await ctx.send("**Nytt testresultat sparades!**")
    else:
        await ctx.send(
            "Det h칛r testresultatet var l친ngsammare 칛n ditt tidigare rekord och sparades inte."
        )


@bot.event
async def on_ready():
    print(f"Logged in as {bot.user.name}")

    if sync_commands:
        synced = await bot.tree.sync()
        print(f"游댃 Synced {len(synced)} command(s)")
    else:
        print("游눠 Syncing commands is disabled")
        print("   To enable syncing, start with '--sync'")


# Load numbers from JSON file
def load_numbers():
    try:
        with open(JSON_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}


# Save numbers to JSON file
def save_numbers(numbers):
    with open(JSON_FILE, "w") as f:
        json.dump(numbers, f, indent=4)


# Command to store a number
@bot.hybrid_command()
async def nbp15(ctx, number: int):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id not in numbers:
        numbers[user_id] = {}
    if ctx.message.attachments:
        attachment_url = ctx.message.attachments[0].url
        numbers[user_id]["NPB15"] = {"number": number, "screenshot": attachment_url}
    else:
        numbers[user_id]["NPB15"] = {"number": number}
    save_numbers(numbers)
    await ctx.send(f"Nytt PB p친 15S registrerat: {number} WPM")


# Command to retrieve stored number
@bot.hybrid_command()
async def pb15(ctx):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id in numbers and "NPB15" in numbers[user_id]:
        pb = numbers[user_id]["NPB15"]
        message = f'Ditt 15S PB 칛r: {pb["number"]} WPM'
        if "screenshot" in pb:
            message += f'\nScreenshot: {pb["screenshot"]}'
        await ctx.send(message)
    else:
        await ctx.send("Inget 15S PB registrerat")


# Similarly define commands for NPB30 and PB30
@bot.hybrid_command()
async def npb30(ctx, number: int):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id not in numbers:
        numbers[user_id] = {}
    if ctx.message.attachments:
        attachment_url = ctx.message.attachments[0].url
        numbers[user_id]["NPB30"] = {"number": number, "screenshot": attachment_url}
    else:
        numbers[user_id]["NPB30"] = {"number": number}
    save_numbers(numbers)
    await ctx.send(f"Nytt PB p친 30S registrerat: {number} WPM")


@bot.hybrid_command()
async def pb30(ctx):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id in numbers and "NPB30" in numbers[user_id]:
        pb = numbers[user_id]["NPB30"]
        message = f'Ditt 30S PB 칛r: {pb["number"]} WPM'
        if "screenshot" in pb:
            message += f'\nScreenshot: {pb["screenshot"]}'
        await ctx.send(message)
    else:
        await ctx.send("Inget 30S PB registrerat")


# Command to store a number for NPB60
@bot.hybrid_command()
async def npb60(ctx, number: int):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id not in numbers:
        numbers[user_id] = {}
    if ctx.message.attachments:
        attachment_url = ctx.message.attachments[0].url
        numbers[user_id]["NPB60"] = {"number": number, "screenshot": attachment_url}
    else:
        numbers[user_id]["NPB60"] = {"number": number}
    save_numbers(numbers)
    await ctx.send(f"Nytt PB p친 60S registrerat: {number} WPM")


# Command to retrieve stored number for PB60
@bot.hybrid_command()
async def pb60(ctx):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id in numbers and "NPB60" in numbers[user_id]:
        pb = numbers[user_id]["NPB60"]
        message = f'Ditt 60S PB 칛r: {pb["number"]} WPM'
        if "screenshot" in pb:
            message += f'\nScreenshot: {pb["screenshot"]}'
        await ctx.send(message)
    else:
        await ctx.send("Inget 60S PB registrerat")


# Command to show all stored PBs for a user
@bot.hybrid_command()
async def pb(ctx):
    user_id = str(ctx.author.id)
    numbers = load_numbers()
    if user_id in numbers:
        message = "H칛r 칛r dina PB:s\n"
        if "NPB15" in numbers[user_id]:
            pb = numbers[user_id]["NPB15"]
            if isinstance(pb, int):
                message += f"15S = {pb} WPM\n"
            else:
                message += f"15S = {pb['number']} WPM\n"
        else:
            message += "15S = Inget registrerat\n"
        if "NPB30" in numbers[user_id]:
            pb = numbers[user_id]["NPB30"]
            if isinstance(pb, int):
                message += f"30S = {pb} WPM\n"
            else:
                message += f"30S = {pb['number']} WPM\n"
        else:
            message += "30S = Inget registrerat\n"
        if "NPB60" in numbers[user_id]:
            pb = numbers[user_id]["NPB60"]
            if isinstance(pb, int):
                message += f"60S = {pb} WPM"
            else:
                message += f"60S = {pb['number']} WPM"
        else:
            message += "60S = Inget registrerat"
        await ctx.send(message)
    else:
        await ctx.send("Inga PB registrerade f칬r dig")


# Command to show all available commands
@bot.hybrid_command()
async def jelp(ctx):
    commands_list = [
        "**/NPB15** - Registrerar ett nytt PB p친 15S.",
        "**/PB15** - Visar ditt registrerade PB p친 15S.",
        "**/NPB30** - Registrerar ett nytt PB p친 30S.",
        "**/PB30** - Visar ditt registrerade PB p친 30S.",
        "**/NPB60** - Registrerar ett nytt PB p친 60S.",
        "**/PB60** - Visar ditt registrerade PB p친 60S.",
        "**/PB** - Visar alla dina registrerade PB.",
        "**/3MR** - F칬rklarar vad treminutersregeln 칛r.",
        "**/test** - Skriv ett hastighetstest s친 snabbt du bara kan!",
        "**/LB** - Visar top 10 snabbast skrivna quotes fr친n /test",
    ]
    help_message = "H칛r 칛r en lista 칬ver tillg칛ngliga kommandon:\n\n"
    help_message += "\n".join(commands_list)
    await ctx.send(help_message)


@bot.hybrid_command()
async def tmr(ctx):
    text = "#3MR 칛r kort f칬r **treminutersregeln**. Det 칛r regeln man kan till칛mpa n칛r man skriver hastighetstest f칬r att f친 goda resultat oftare. Den g친r ut p친 att man tar en paus p친 tre minuter mellan varje test. Detta g칬r man f칬r att 친terst칛lla sinnest칛mningen men ocks친 f칬r att f친 tillbaka energin."
    await ctx.send(text)


def parse_arguments() -> dict:
    parser = argparse.ArgumentParser(prog="PB Bot")
    parser.add_argument("--sync", action="store_true")
    return parser.parse_args()


if __name__ == "__main__":
    load_dotenv(override=True)
    TOKEN = os.getenv("DISCORD_TOKEN")

    arguments = parse_arguments()
    sync_commands = arguments.sync

    if none_or_whitespace(TOKEN):
        print("Please set the 'DISCORD_TOKEN' environment variable.\n")
        sys.exit(1)

    bot.run(TOKEN)
